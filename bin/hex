#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys

BUFF_SIZE = 1024 * 1024 * 8 # 8MB

class HexEncoder(object):
    def __init__(self):
        pass

    def process(self, data):
        return data.encode("hex")

class HexDecoder(object):
    def __init__(self):
        self.buff = ""

    def process(self, data):
        data = "".join([self.buff] + data.split())
        self.buff = ""
        if len(data) % 2 == 1:
            self.buff = data[-1]
            return data[:-1].decode("hex")
        else:
            return data.decode("hex")

def main():
    args = sys.argv[1:]

    processor = None
    for arg in args:
        if arg[:2] == "-d":
            processor = HexDecoder()
    if processor == None:
        processor = HexEncoder()
    source = sys.stdin
    target = sys.stdout

    if len(args) > 0 and (args[0] == "--help" or args[0] == "-h"):
        print("Usage: {0} [input] [output] [-d]".format(sys.argv[0]))
        exit()
    if len(args) >= 1 and args[0][0] != "-":
        try:
            source = open(args[0], "rb")
        except:
            sys.stderr.write("Can not open file \"{0}\"\n".format(args[0]))
            exit(1)
    if len(args) >= 2 and args[1][0] != "-":
        try:
            source = open(args[1], "wb")
        except:
            sys.stderr.write("Can not open file \"{0}\"\n".format(arg[1]))
            exit(2)
    while True:
        data = source.read(BUFF_SIZE)
        if len(data) == 0:
            break
        target.write(processor.process(data))

if __name__ == "__main__":
    main()
